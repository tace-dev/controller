   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.10.21 - 04 Feb 2014
   3                     ; Generator (Limited) V4.3.12 - 11 Feb 2014
  17                     	switch	.data
  18  0000               _timer50usCount:
  19  0000 00            	dc.b	0
  20  0001               _timer100usCount:
  21  0001 00            	dc.b	0
  22  0002               ___iouart_Ready:
  23  0002 00            	dc.b	0
  24  0003               __io_head:
  25  0003 00            	dc.b	0
  26  0004               __io_tail:
  27  0004 00            	dc.b	0
  28  0005               ____k:
  29  0005 00            	dc.b	0
  30  0006               ____k2:
  31  0006 00            	dc.b	0
  32  0007               __io_rc_prev:
  33  0007 02            	dc.b	2
  66                     ; 18 void	timer2CiCb(void)
  66                     ; 19 {	
  68                     	switch	.text
  69  0000               _timer2CiCb:
  73                     ; 20 	if( indiIOUartIdle != 0 )
  75  0000 725d0000      	tnz	_indiIOUartIdle
  76  0004 2701          	jreq	L12
  77                     ; 21 		return;
  80  0006 81            	ret
  81  0007               L12:
  82                     ; 23 	if( ___k == 0 )
  84  0007 725d0005      	tnz	____k
  85  000b 2601          	jrne	L32
  86                     ; 24 		return;
  89  000d 81            	ret
  90  000e               L32:
  91                     ; 26 	_io_buf[_io_head++] = ___k;
  93  000e c60003        	ld	a,__io_head
  94  0011 97            	ld	xl,a
  95  0012 725c0003      	inc	__io_head
  96  0016 9f            	ld	a,xl
  97  0017 5f            	clrw	x
  98  0018 97            	ld	xl,a
  99  0019 c60005        	ld	a,____k
 100  001c d70041        	ld	(__io_buf,x),a
 101                     ; 27 	if( _io_head == _IO_BUF_SIZE )
 103  001f c60003        	ld	a,__io_head
 104  0022 a148          	cp	a,#72
 105  0024 2604          	jrne	L52
 106                     ; 28 		_io_head = 0;
 108  0026 725f0003      	clr	__io_head
 109  002a               L52:
 110                     ; 29 	___k = 0;
 112  002a 725f0005      	clr	____k
 113                     ; 30 }
 116  002e 81            	ret
 153                     ; 34 void	timer2_UpdateCb(void)
 153                     ; 35 {
 154                     	switch	.text
 155  002f               _timer2_UpdateCb:
 157  002f 88            	push	a
 158       00000001      OFST:	set	1
 161                     ; 39 	i = GPIO_ReadInputData(D_IOUART_RX_PORT);
 163  0030 ae500f        	ldw	x,#20495
 164  0033 cd0000        	call	_GPIO_ReadInputData
 166  0036 6b01          	ld	(OFST+0,sp),a
 167                     ; 40 	i = i & D_IOUART_RX_PIN;
 169  0038 7b01          	ld	a,(OFST+0,sp)
 170  003a a420          	and	a,#32
 171  003c 6b01          	ld	(OFST+0,sp),a
 172                     ; 41 	if( i == _io_rc_prev )
 174  003e 7b01          	ld	a,(OFST+0,sp)
 175  0040 c10007        	cp	a,__io_rc_prev
 176  0043 2602          	jrne	L34
 177                     ; 42 		return;
 180  0045 84            	pop	a
 181  0046 81            	ret
 182  0047               L34:
 183                     ; 44 	_io_rc_prev = i;
 185  0047 7b01          	ld	a,(OFST+0,sp)
 186  0049 c70007        	ld	__io_rc_prev,a
 187                     ; 45 	if( i == 0 )
 189  004c 0d01          	tnz	(OFST+0,sp)
 190  004e 261e          	jrne	L54
 191                     ; 47 		_io_buf[_io_head] = ___k;
 193  0050 c60003        	ld	a,__io_head
 194  0053 5f            	clrw	x
 195  0054 97            	ld	xl,a
 196  0055 c60005        	ld	a,____k
 197  0058 d70041        	ld	(__io_buf,x),a
 198                     ; 48 		_io_head += 1;
 200  005b 725c0003      	inc	__io_head
 201                     ; 49 		if( _io_head == _IO_BUF_SIZE )
 203  005f c60003        	ld	a,__io_head
 204  0062 a148          	cp	a,#72
 205  0064 2604          	jrne	L74
 206                     ; 50 			_io_head = 0;
 208  0066 725f0003      	clr	__io_head
 209  006a               L74:
 210                     ; 51 		___k = 0;
 212  006a 725f0005      	clr	____k
 213  006e               L54:
 214                     ; 54 }
 217  006e 84            	pop	a
 218  006f 81            	ret
 221                     	switch	.data
 222  0008               __swuart_tx_head:
 223  0008 00            	dc.b	0
 224  0009               __swuart_tx_tail:
 225  0009 00            	dc.b	0
 226  000a               __sw_bit:
 227  000a 00            	dc.b	0
 228  000b               __sw_sending:
 229  000b 00            	dc.b	0
 250                     ; 82 void	_swuartCb(void)
 250                     ; 83 {
 251                     	switch	.text
 252  0070               __swuartCb:
 256                     ; 125 }
 259  0070 81            	ret
 310                     ; 127 void	swuart_Write(uint8_t *p, uint8_t size)
 310                     ; 128 {
 311                     	switch	.text
 312  0071               _swuart_Write:
 314  0071 89            	pushw	x
 315  0072 88            	push	a
 316       00000001      OFST:	set	1
 319                     ; 130 	for( i=0; i<size; i++ )
 321  0073 0f01          	clr	(OFST+0,sp)
 323  0075 2028          	jra	L701
 324  0077               L301:
 325                     ; 132 		swTxBuffer[_swuart_tx_head] = p[i];
 327  0077 c60008        	ld	a,__swuart_tx_head
 328  007a 5f            	clrw	x
 329  007b 97            	ld	xl,a
 330  007c 89            	pushw	x
 331  007d 7b04          	ld	a,(OFST+3,sp)
 332  007f 97            	ld	xl,a
 333  0080 7b05          	ld	a,(OFST+4,sp)
 334  0082 1b03          	add	a,(OFST+2,sp)
 335  0084 2401          	jrnc	L41
 336  0086 5c            	incw	x
 337  0087               L41:
 338  0087 02            	rlwa	x,a
 339  0088 f6            	ld	a,(x)
 340  0089 85            	popw	x
 341  008a d70001        	ld	(_swTxBuffer,x),a
 342                     ; 133 		_swuart_tx_head = (_swuart_tx_head + 1) % SW_TX_BUFFER_SIZE;
 344  008d c60008        	ld	a,__swuart_tx_head
 345  0090 5f            	clrw	x
 346  0091 97            	ld	xl,a
 347  0092 5c            	incw	x
 348  0093 a640          	ld	a,#64
 349  0095 cd0000        	call	c_smodx
 351  0098 01            	rrwa	x,a
 352  0099 c70008        	ld	__swuart_tx_head,a
 353  009c 02            	rlwa	x,a
 354                     ; 130 	for( i=0; i<size; i++ )
 356  009d 0c01          	inc	(OFST+0,sp)
 357  009f               L701:
 360  009f 7b01          	ld	a,(OFST+0,sp)
 361  00a1 1106          	cp	a,(OFST+5,sp)
 362  00a3 25d2          	jrult	L301
 363                     ; 135 }
 366  00a5 5b03          	addw	sp,#3
 367  00a7 81            	ret
 370                     	switch	.data
 371  000c               __t20ms:
 372  000c 00            	dc.b	0
 373  000d               __mtCount:
 374  000d 14            	dc.b	20
 375  000e               __t2msCount:
 376  000e 00            	dc.b	0
 406                     ; 147 void	timer4_UpdateCb(void)
 406                     ; 148 {
 407                     	switch	.text
 408  00a8               _timer4_UpdateCb:
 412                     ; 149 	___k++;
 414  00a8 725c0005      	inc	____k
 415                     ; 150 	if( timer50usCount == 0 )
 417  00ac 725d0000      	tnz	_timer50usCount
 418  00b0 2641          	jrne	L321
 419                     ; 152 		_mtCount--;
 421  00b2 725a000d      	dec	__mtCount
 422                     ; 153 		if( _mtCount == 0 )
 424  00b6 725d000d      	tnz	__mtCount
 425  00ba 2613          	jrne	L521
 426                     ; 156 			_mtCount = 1;	//	10-1000us, 5-500us,, 3-300us
 428  00bc 3501000d      	mov	__mtCount,#1
 429                     ; 160 			_t2msCount++;
 431  00c0 725c000e      	inc	__t2msCount
 432                     ; 161 			if( _t2msCount == 200 )
 434  00c4 c6000e        	ld	a,__t2msCount
 435  00c7 a1c8          	cp	a,#200
 436  00c9 2604          	jrne	L521
 437                     ; 162 				_t2msCount = 0;
 439  00cb 725f000e      	clr	__t2msCount
 440  00cf               L521:
 441                     ; 164 		timer50usCount = 1;
 443  00cf 35010000      	mov	_timer50usCount,#1
 444                     ; 165 		timer100usCount++;
 446  00d3 725c0001      	inc	_timer100usCount
 447                     ; 166 		if( timer100usCount == 200 )
 449  00d7 c60001        	ld	a,_timer100usCount
 450  00da a1c8          	cp	a,#200
 451  00dc 2628          	jrne	L531
 452                     ; 168 			_t20ms++;
 454  00de 725c000c      	inc	__t20ms
 455                     ; 169 			if( _t20ms == 100 )
 457  00e2 c6000c        	ld	a,__t20ms
 458  00e5 a164          	cp	a,#100
 459  00e7 2604          	jrne	L331
 460                     ; 170 				_t20ms = 0;
 462  00e9 725f000c      	clr	__t20ms
 463  00ed               L331:
 464                     ; 171 			timer100usCount = 0;
 466  00ed 725f0001      	clr	_timer100usCount
 467  00f1 2013          	jra	L531
 468  00f3               L321:
 469                     ; 180 		timer50usCount = 0;
 471  00f3 725f0000      	clr	_timer50usCount
 472                     ; 183 		if( indiIOUartSendWait != 0 )
 474  00f7 725d0000      	tnz	_indiIOUartSendWait
 475  00fb 2706          	jreq	L731
 476                     ; 184 			indiIOUartSendWait--;
 478  00fd 725a0000      	dec	_indiIOUartSendWait
 480  0101 2003          	jra	L531
 481  0103               L731:
 482                     ; 187 			iouart_Write();
 484  0103 cd0000        	call	_iouart_Write
 486  0106               L531:
 487                     ; 191 	__rcCb();
 489  0106 cd0000        	call	___rcCb
 491                     ; 193 }
 494  0109 81            	ret
 517                     ; 195 void	timer485Cntl(void)
 517                     ; 196 {
 518                     	switch	.text
 519  010a               _timer485Cntl:
 523                     ; 218 }
 526  010a 81            	ret
 529                     	switch	.data
 530  000f               ___timer100ms:
 531  000f 00            	dc.b	0
 532  0010               ___timer1s:
 533  0010 00            	dc.b	0
 534  0011               ___timer1min:
 535  0011 00            	dc.b	0
 536  0012               ___timer1h:
 537  0012 00            	dc.b	0
 538  0013               ___timeri:
 539  0013 00            	dc.b	0
 540  0014               ___timeri2:
 541  0014 00            	dc.b	0
 587                     ; 227 uint8_t	timerCalc(void)
 587                     ; 228 {
 588                     	switch	.text
 589  010b               _timerCalc:
 591  010b 89            	pushw	x
 592       00000002      OFST:	set	2
 595                     ; 230 	uint8_t	r = 0;
 597  010c 0f02          	clr	(OFST+0,sp)
 598                     ; 232 	uint8_t	i = _t20ms/5;
 600  010e c6000c        	ld	a,__t20ms
 601  0111 5f            	clrw	x
 602  0112 97            	ld	xl,a
 603  0113 a605          	ld	a,#5
 604  0115 62            	div	x,a
 605  0116 9f            	ld	a,xl
 606  0117 6b01          	ld	(OFST-1,sp),a
 607                     ; 234 	if( __timeri2 != _t2msCount )
 609  0119 c60014        	ld	a,___timeri2
 610  011c c1000e        	cp	a,__t2msCount
 611  011f 2707          	jreq	L171
 612                     ; 237 		__timeri2 = _t2msCount;
 614  0121 55000e0014    	mov	___timeri2,__t2msCount
 615                     ; 238 		timer485Cntl();
 617  0126 ade2          	call	_timer485Cntl
 619  0128               L171:
 620                     ; 240 	if( __timeri != i )
 622  0128 c60013        	ld	a,___timeri
 623  012b 1101          	cp	a,(OFST-1,sp)
 624  012d 2751          	jreq	L371
 625                     ; 242 		__timeri = i;
 627  012f 7b01          	ld	a,(OFST-1,sp)
 628  0131 c70013        	ld	___timeri,a
 629                     ; 243 		__timer100ms++;
 631  0134 725c000f      	inc	___timer100ms
 632                     ; 244 		if( __timer100ms != 10 )
 634  0138 c6000f        	ld	a,___timer100ms
 635  013b a10a          	cp	a,#10
 636  013d 2704          	jreq	L571
 637                     ; 245 			return r;
 639  013f 7b02          	ld	a,(OFST+0,sp)
 641  0141 2011          	jra	L42
 642  0143               L571:
 643                     ; 247 		__timer100ms = 0;
 645  0143 725f000f      	clr	___timer100ms
 646                     ; 248 		__timer1s++;
 648  0147 725c0010      	inc	___timer1s
 649                     ; 249 		if( __timer1s != 60 )
 651  014b c60010        	ld	a,___timer1s
 652  014e a13c          	cp	a,#60
 653  0150 2704          	jreq	L771
 654                     ; 250 			return r;
 656  0152 7b02          	ld	a,(OFST+0,sp)
 658  0154               L42:
 660  0154 85            	popw	x
 661  0155 81            	ret
 662  0156               L771:
 663                     ; 252 		__timer1s = 0;
 665  0156 725f0010      	clr	___timer1s
 666                     ; 253 		__timer1min++;
 668  015a 725c0011      	inc	___timer1min
 669                     ; 254 		r = 1;
 671  015e a601          	ld	a,#1
 672  0160 6b02          	ld	(OFST+0,sp),a
 673                     ; 255 		if( __timer1min != 60 )
 675  0162 c60011        	ld	a,___timer1min
 676  0165 a13c          	cp	a,#60
 677  0167 2704          	jreq	L102
 678                     ; 256 			return r;
 680  0169 a601          	ld	a,#1
 682  016b 20e7          	jra	L42
 683  016d               L102:
 684                     ; 258 		__timer1min = 0;
 686  016d 725f0011      	clr	___timer1min
 687                     ; 259 		__timer1h++;
 689  0171 725c0012      	inc	___timer1h
 690                     ; 260 		if( __timer1h == 24 )
 692  0175 c60012        	ld	a,___timer1h
 693  0178 a118          	cp	a,#24
 694  017a 2604          	jrne	L371
 695                     ; 261 			__timer1h = 0;
 697  017c 725f0012      	clr	___timer1h
 698  0180               L371:
 699                     ; 263 	return r;
 701  0180 7b02          	ld	a,(OFST+0,sp)
 703  0182 20d0          	jra	L42
 731                     ; 273 void	systemTimer(void)
 731                     ; 274 {
 732                     	switch	.text
 733  0184               _systemTimer:
 737                     ; 288 	CLK_PeripheralClockConfig(CLK_Peripheral_TIM4, ENABLE);
 739  0184 ae0201        	ldw	x,#513
 740  0187 cd0000        	call	_CLK_PeripheralClockConfig
 742                     ; 289 	TIM4_TimeBaseInit(TIM4_Prescaler_32, TIMER_PERIOD);
 744  018a ae0518        	ldw	x,#1304
 745  018d cd0000        	call	_TIM4_TimeBaseInit
 747                     ; 290 	TIM4_ClearFlag(TIM4_FLAG_Update);
 749  0190 a601          	ld	a,#1
 750  0192 cd0000        	call	_TIM4_ClearFlag
 752                     ; 291 	TIM4_ITConfig(TIM4_IT_Update, ENABLE);
 754  0195 ae0101        	ldw	x,#257
 755  0198 cd0000        	call	_TIM4_ITConfig
 757                     ; 292 	TIM4_Cmd(ENABLE);
 759  019b a601          	ld	a,#1
 760  019d cd0000        	call	_TIM4_Cmd
 762                     ; 328 }
 765  01a0 81            	ret
 797                     ; 330 void	timer2Cntl(uint8_t mode)
 797                     ; 331 {
 798                     	switch	.text
 799  01a1               _timer2Cntl:
 803                     ; 335 	return;
 806  01a1 81            	ret
1039                     	xdef	___timeri2
1040                     	xdef	___timeri
1041                     	xdef	_timer485Cntl
1042                     	xdef	__t2msCount
1043                     	xdef	__mtCount
1044                     	xref	___rcCb
1045                     	xdef	__swuartCb
1046                     	xdef	__sw_sending
1047                     	xdef	__sw_bit
1048                     	switch	.bss
1049  0000               __sw_data:
1050  0000 00            	ds.b	1
1051                     	xdef	__sw_data
1052                     	xdef	__swuart_tx_tail
1053                     	xdef	__swuart_tx_head
1054  0001               _swTxBuffer:
1055  0001 000000000000  	ds.b	64
1056                     	xdef	_swTxBuffer
1057                     	xdef	__io_rc_prev
1058                     	xdef	____k2
1059                     	xdef	____k
1060                     	xdef	_swuart_Write
1061                     	xdef	_timerCalc
1062                     	xdef	_timer2CiCb
1063                     	xdef	_timer4_UpdateCb
1064                     	xdef	_systemTimer
1065                     	xdef	___timer1h
1066                     	xdef	___timer1min
1067                     	xdef	___timer1s
1068                     	xdef	___timer100ms
1069                     	xdef	__t20ms
1070                     	xdef	_timer50usCount
1071                     	xdef	_timer100usCount
1072  0041               __io_buf:
1073  0041 000000000000  	ds.b	72
1074                     	xdef	__io_buf
1075                     	xdef	__io_tail
1076                     	xdef	__io_head
1077                     	xref	_iouart_Write
1078                     	xdef	_timer2Cntl
1079                     	xref	_indiIOUartIdle
1080                     	xdef	___iouart_Ready
1081                     	xref	_indiIOUartSendWait
1082                     	xdef	_timer2_UpdateCb
1083                     	xref	_TIM4_ClearFlag
1084                     	xref	_TIM4_ITConfig
1085                     	xref	_TIM4_Cmd
1086                     	xref	_TIM4_TimeBaseInit
1087                     	xref	_GPIO_ReadInputData
1088                     	xref	_CLK_PeripheralClockConfig
1089                     	xref.b	c_x
1109                     	xref	c_smodx
1110                     	end
