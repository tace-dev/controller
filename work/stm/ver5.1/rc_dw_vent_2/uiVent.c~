//	
#include "stdafx.h"
#include "uiDef.h"

#if defined(_RC_DW_VENT_)

#define VK_TIMER_RESET	100

#define _K3	3	//	Up
#define	_K4	4	//	Vent
#define _K7	5	//	Dn
#define _K8	6	//	Func

#define _VK_UP	_K3
#define _VK_DN	_K7
#define _VK_FN	_K8
#define _VK_ON	_K4

typedef struct tagVentInfo
{
	uint8_t	enable;
	uint8_t	bl;
	uint8_t	fn;
	uint8_t	t1, t2;
	uint8_t	speed;
	uint8_t	err;
}	VENTINFO, *LPVENTINFO;

VENTINFO	_ventInfo;

LPVENTINFO	vent_getInfo(void)
{
	return &_ventInfo;
}

uint8_t vent_time_event[5];

void	vent_log(uint8_t id)
{
	//	display level (0~5)
}

void	vent_blink(void)
{
	LPVENTINFO	lp = vent_getInfo();
	if( lp->enable == 0 )
		return;

	if( vent_time_event[0] != __timer100ms)
	{
		vent_time_event[0] = __timer100ms;
		vent_time_event[1]++;
		if( vent_time_event[1] >= 3 )
		{
			vent_time_event[1] = 0;
			lp->bl = lp->bl == 0 ? 1 : 0;
			;
		}
		vent_time_event[2]++;
		if( vent_time_event[2] >= 50 )
		{
			lp->enable = 0;
		}
	}
}

void	vent_disp_func(void)
{
	LPVENTINFO	lp = vent_getInfo();
	uint8_t	fn[] = { bT31, bT32, bT33, bT34 };
	uint8_t	i;
	for( i=0; i<4; i++ )
	{
		if( i == lp->fn )	{	LCD_BIT_SET(fn[i]);	}
		else		{	LCD_BIT_CLEAR(fn[i]);	}
	}
}

void	vent_update_func(void)
{
	LPVENTINFO	lp = vent_getInfo();
	lp->fn = (lp->fn + 1) % 4;
	//	check - bT21
	//	filter - bT23
	vent_disp_func();
}

void	vent_disp_level(void)
{
	LPVENTINFO	lp = vent_getInfo();
	uint8_t	i, j;
	uint8_t	sp[] = { bT25, bT26, bT27, bT28, bT29, bT30 };
	j = lp->speed*2;
	for( i=0; i<6; i++ )
	{
		if( i<j )	{	LCD_BIT_CLEAR(sp[i]);	}
		else	{ 	LCD_BIT_SET(sp[i]);	}
	}
	LCD_BIT_SET(bT24);
}

void	vent_update_level(uint8_t key)
{
	LPVENTINFO	lp = vent_getInfo();
	if( lp->fn == 1 )	//	vent
	{
		vent_disp_level();
	}
	else if( lp->fn == 2 )	//	sleep
	{
	}
	else if( lp->fn == 3 )	//	reser
	{
	}
	else if( lp->fn == 4 )	//	auto
	{
		lp->speed = 1;
		vent_disp_level();
	}
}

void	vent_disp_info(void)
{
	LPVENTINFO	lp = vent_getInfo();
}

void	vent_loop(uint8_t key)
{
	LPVENTINFO	lp = vent_getInfo();
	uint8_t	i = 0;
	uint8_t	j = 0;
	uint8_t	k = 0;
	
	uint8_t _pre_boiler_water_shower = 0;
	uint8_t _pre_boiler_water_heat = 0;	
	
	//	blink fn
	vent_blink();
	if( __s == 0 )  //	normal 
	{
		if( _dsCount == 0 )
		{
			if( vent_time_event[2] != __timer100ms )
			{
				vent_time_event[2] = __timer100ms;
				vent_time_event[0]++;
				if( vent_time_event[0] >= 36 )
				{
					_dsCount = 2;
					vent_time_event[1] = vent_time_event[2] = vent_time_event[3] = 0;
				}
				vent_time_event[3]++;
				if( vent_time_event[3] == 4 )
				{
					vent_time_event[3] = 0;
					vent_time_event[1] = (vent_time_event[1] + 1) % 6;
					vent_log(vent_time_event[1]);
				}	
			}
		} 
		else if (_dsCount == 2) 
		{
			_dsCount = 1;
			vent_disp_info();
		}
		else if (_dsCount == 1) 
		{
			//	waiting vent
			if( key == _VK_ON )
			{
				vent_time_event[0] = __timer100ms;
				vent_time_event[1] = 0;
				vent_time_event[2] = 0;
				_dsCount = 11;
				lp->bl = lp->enable = 1;
			}
		}
		else if( _dsCount == 11 )
		{
			if( vent_time_event[0] != __timer100ms )
			{
				vent_time_event[0] = __timer100ms;
				vent_time_event[1]++;
				if( vent_Time_event[1] >= VK_TIMER_RESET )
				{
					_dsCount = 1;
				}
			}
			if( key == _VK_ON )
			{
VENT_TIMEOUT:
				_dsCount = 1;
				lp->enable = 0;
			}
			else
			{
				if( key != 0 ) { vent_time_event[2] = 0; }

				if( key == _VK_FN ) { vent_update_func(); }
				else if( key == _VK_UP || key == _VK_DN ) { vent_update_level(key); }
				else
				{
					//	heat/outer/room/setup
					goto VENT_TIMEOUT;
				}
			}
		}
	}
}

#endif

