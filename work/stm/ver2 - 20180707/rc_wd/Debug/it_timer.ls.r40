   1                     ; C Compiler for STM8 (COSMIC Software)
   2                     ; Parser V4.10.21 - 04 Feb 2014
   3                     ; Generator (Limited) V4.3.12 - 11 Feb 2014
  17                     	switch	.data
  18  0000               _timer50usCount:
  19  0000 00            	dc.b	0
  20  0001               _timer100usCount:
  21  0001 00            	dc.b	0
  22  0002               _lcd_pwmCount:
  23  0002 09            	dc.b	9
  24  0003               _lcd_pwmIndex:
  25  0003 00            	dc.b	0
  26  0004               ___iouart_Ready:
  27  0004 00            	dc.b	0
  28  0005               __io_head:
  29  0005 00            	dc.b	0
  30  0006               __io_tail:
  31  0006 00            	dc.b	0
  32  0007               ____k:
  33  0007 00            	dc.b	0
  34  0008               ____k2:
  35  0008 00            	dc.b	0
  36  0009               __io_rc_prev:
  37  0009 02            	dc.b	2
  70                     ; 32 void	timer2CiCb(void)
  70                     ; 33 {	
  72                     	switch	.text
  73  0000               _timer2CiCb:
  77                     ; 34 	if( indiIOUartIdle != 0 )
  79  0000 725d0000      	tnz	_indiIOUartIdle
  80  0004 2701          	jreq	L12
  81                     ; 35 		return;
  84  0006 81            	ret
  85  0007               L12:
  86                     ; 37 	if( ___k == 0 )
  88  0007 725d0007      	tnz	____k
  89  000b 2601          	jrne	L32
  90                     ; 38 		return;
  93  000d 81            	ret
  94  000e               L32:
  95                     ; 40 	_io_buf[_io_head++] = ___k;
  97  000e c60005        	ld	a,__io_head
  98  0011 97            	ld	xl,a
  99  0012 725c0005      	inc	__io_head
 100  0016 9f            	ld	a,xl
 101  0017 5f            	clrw	x
 102  0018 97            	ld	xl,a
 103  0019 c60007        	ld	a,____k
 104  001c d70041        	ld	(__io_buf,x),a
 105                     ; 41 	if( _io_head == _IO_BUF_SIZE )
 107  001f c60005        	ld	a,__io_head
 108  0022 a15a          	cp	a,#90
 109  0024 2604          	jrne	L52
 110                     ; 42 		_io_head = 0;
 112  0026 725f0005      	clr	__io_head
 113  002a               L52:
 114                     ; 43 	___k = 0;
 116  002a 725f0007      	clr	____k
 117                     ; 44 }
 120  002e 81            	ret
 157                     ; 48 void	timer2_UpdateCb(void)
 157                     ; 49 {
 158                     	switch	.text
 159  002f               _timer2_UpdateCb:
 161  002f 88            	push	a
 162       00000001      OFST:	set	1
 165                     ; 53 	i = GPIO_ReadInputData(D_IOUART_RX_PORT);
 167  0030 ae500f        	ldw	x,#20495
 168  0033 cd0000        	call	_GPIO_ReadInputData
 170  0036 6b01          	ld	(OFST+0,sp),a
 171                     ; 54 	i = i & D_IOUART_RX_PIN;
 173  0038 7b01          	ld	a,(OFST+0,sp)
 174  003a a420          	and	a,#32
 175  003c 6b01          	ld	(OFST+0,sp),a
 176                     ; 55 	if( i == _io_rc_prev )
 178  003e 7b01          	ld	a,(OFST+0,sp)
 179  0040 c10009        	cp	a,__io_rc_prev
 180  0043 2602          	jrne	L34
 181                     ; 56 		return;
 184  0045 84            	pop	a
 185  0046 81            	ret
 186  0047               L34:
 187                     ; 58 	_io_rc_prev = i;
 189  0047 7b01          	ld	a,(OFST+0,sp)
 190  0049 c70009        	ld	__io_rc_prev,a
 191                     ; 59 	if( i == 0 )
 193  004c 0d01          	tnz	(OFST+0,sp)
 194  004e 261e          	jrne	L54
 195                     ; 61 		_io_buf[_io_head] = ___k;
 197  0050 c60005        	ld	a,__io_head
 198  0053 5f            	clrw	x
 199  0054 97            	ld	xl,a
 200  0055 c60007        	ld	a,____k
 201  0058 d70041        	ld	(__io_buf,x),a
 202                     ; 62 		_io_head += 1;
 204  005b 725c0005      	inc	__io_head
 205                     ; 63 		if( _io_head == _IO_BUF_SIZE )
 207  005f c60005        	ld	a,__io_head
 208  0062 a15a          	cp	a,#90
 209  0064 2604          	jrne	L74
 210                     ; 64 			_io_head = 0;
 212  0066 725f0005      	clr	__io_head
 213  006a               L74:
 214                     ; 65 		___k = 0;
 216  006a 725f0007      	clr	____k
 217  006e               L54:
 218                     ; 68 }
 221  006e 84            	pop	a
 222  006f 81            	ret
 225                     	switch	.data
 226  000a               __swuart_tx_head:
 227  000a 00            	dc.b	0
 228  000b               __swuart_tx_tail:
 229  000b 00            	dc.b	0
 230  000c               __sw_bit:
 231  000c 00            	dc.b	0
 232  000d               __sw_sending:
 233  000d 00            	dc.b	0
 254                     ; 96 void	_swuartCb(void)
 254                     ; 97 {
 255                     	switch	.text
 256  0070               __swuartCb:
 260                     ; 139 }
 263  0070 81            	ret
 314                     ; 141 void	swuart_Write(uint8_t *p, uint8_t size)
 314                     ; 142 {
 315                     	switch	.text
 316  0071               _swuart_Write:
 318  0071 89            	pushw	x
 319  0072 88            	push	a
 320       00000001      OFST:	set	1
 323                     ; 144 	for( i=0; i<size; i++ )
 325  0073 0f01          	clr	(OFST+0,sp)
 327  0075 2028          	jra	L701
 328  0077               L301:
 329                     ; 146 		swTxBuffer[_swuart_tx_head] = p[i];
 331  0077 c6000a        	ld	a,__swuart_tx_head
 332  007a 5f            	clrw	x
 333  007b 97            	ld	xl,a
 334  007c 89            	pushw	x
 335  007d 7b04          	ld	a,(OFST+3,sp)
 336  007f 97            	ld	xl,a
 337  0080 7b05          	ld	a,(OFST+4,sp)
 338  0082 1b03          	add	a,(OFST+2,sp)
 339  0084 2401          	jrnc	L41
 340  0086 5c            	incw	x
 341  0087               L41:
 342  0087 02            	rlwa	x,a
 343  0088 f6            	ld	a,(x)
 344  0089 85            	popw	x
 345  008a d70001        	ld	(_swTxBuffer,x),a
 346                     ; 147 		_swuart_tx_head = (_swuart_tx_head + 1) % SW_TX_BUFFER_SIZE;
 348  008d c6000a        	ld	a,__swuart_tx_head
 349  0090 5f            	clrw	x
 350  0091 97            	ld	xl,a
 351  0092 5c            	incw	x
 352  0093 a640          	ld	a,#64
 353  0095 cd0000        	call	c_smodx
 355  0098 01            	rrwa	x,a
 356  0099 c7000a        	ld	__swuart_tx_head,a
 357  009c 02            	rlwa	x,a
 358                     ; 144 	for( i=0; i<size; i++ )
 360  009d 0c01          	inc	(OFST+0,sp)
 361  009f               L701:
 364  009f 7b01          	ld	a,(OFST+0,sp)
 365  00a1 1106          	cp	a,(OFST+5,sp)
 366  00a3 25d2          	jrult	L301
 367                     ; 149 }
 370  00a5 5b03          	addw	sp,#3
 371  00a7 81            	ret
 396                     ; 152 void	_rcCb(void)
 396                     ; 153 {
 397                     	switch	.text
 398  00a8               __rcCb:
 402                     ; 154 	if( lcd_pwmIndex == 0 )	{	PWM_HIGH;	}
 404  00a8 725d0003      	tnz	_lcd_pwmIndex
 405  00ac 2606          	jrne	L321
 408  00ae 721c5014      	bset	20500,#6
 410  00b2 2004          	jra	L521
 411  00b4               L321:
 412                     ; 155 	else					{	PWM_LOW;	}
 414  00b4 721d5014      	bres	20500,#6
 415  00b8               L521:
 416                     ; 157 	lcd_pwmIndex++;
 418  00b8 725c0003      	inc	_lcd_pwmIndex
 419                     ; 158 	if( lcd_pwmIndex == lcd_pwmCount )
 421  00bc c60003        	ld	a,_lcd_pwmIndex
 422  00bf c10002        	cp	a,_lcd_pwmCount
 423  00c2 2604          	jrne	L721
 424                     ; 159 		lcd_pwmIndex = 0;
 426  00c4 725f0003      	clr	_lcd_pwmIndex
 427  00c8               L721:
 428                     ; 160 }
 431  00c8 81            	ret
 434                     	switch	.data
 435  000e               __t20ms:
 436  000e 00            	dc.b	0
 437  000f               __mtCount:
 438  000f 14            	dc.b	20
 439  0010               __t2msCount:
 440  0010 00            	dc.b	0
 470                     ; 169 void	timer4_UpdateCb(void)
 470                     ; 170 {
 471                     	switch	.text
 472  00c9               _timer4_UpdateCb:
 476                     ; 171 	___k++;
 478  00c9 725c0007      	inc	____k
 479                     ; 172 	if( timer50usCount == 0 )
 481  00cd 725d0000      	tnz	_timer50usCount
 482  00d1 2641          	jrne	L141
 483                     ; 174 		_mtCount--;
 485  00d3 725a000f      	dec	__mtCount
 486                     ; 175 		if( _mtCount == 0 )
 488  00d7 725d000f      	tnz	__mtCount
 489  00db 2613          	jrne	L341
 490                     ; 178 			_mtCount = 1;	//	10-1000us, 5-500us,, 3-300us
 492  00dd 3501000f      	mov	__mtCount,#1
 493                     ; 182 			_t2msCount++;
 495  00e1 725c0010      	inc	__t2msCount
 496                     ; 183 			if( _t2msCount == 200 )
 498  00e5 c60010        	ld	a,__t2msCount
 499  00e8 a1c8          	cp	a,#200
 500  00ea 2604          	jrne	L341
 501                     ; 184 				_t2msCount = 0;
 503  00ec 725f0010      	clr	__t2msCount
 504  00f0               L341:
 505                     ; 186 		timer50usCount = 1;
 507  00f0 35010000      	mov	_timer50usCount,#1
 508                     ; 187 		timer100usCount++;
 510  00f4 725c0001      	inc	_timer100usCount
 511                     ; 188 		if( timer100usCount == 200 )
 513  00f8 c60001        	ld	a,_timer100usCount
 514  00fb a1c8          	cp	a,#200
 515  00fd 2628          	jrne	L351
 516                     ; 190 			_t20ms++;
 518  00ff 725c000e      	inc	__t20ms
 519                     ; 191 			if( _t20ms == 100 )
 521  0103 c6000e        	ld	a,__t20ms
 522  0106 a164          	cp	a,#100
 523  0108 2604          	jrne	L151
 524                     ; 192 				_t20ms = 0;
 526  010a 725f000e      	clr	__t20ms
 527  010e               L151:
 528                     ; 193 			timer100usCount = 0;
 530  010e 725f0001      	clr	_timer100usCount
 531  0112 2013          	jra	L351
 532  0114               L141:
 533                     ; 202 		timer50usCount = 0;
 535  0114 725f0000      	clr	_timer50usCount
 536                     ; 205 		if( indiIOUartSendWait != 0 )
 538  0118 725d0000      	tnz	_indiIOUartSendWait
 539  011c 2706          	jreq	L551
 540                     ; 206 			indiIOUartSendWait--;
 542  011e 725a0000      	dec	_indiIOUartSendWait
 544  0122 2003          	jra	L351
 545  0124               L551:
 546                     ; 209 			iouart_Write();
 548  0124 cd0000        	call	_iouart_Write
 550  0127               L351:
 551                     ; 213 	_rcCb();
 553  0127 cd00a8        	call	__rcCb
 555                     ; 215 }
 558  012a 81            	ret
 581                     ; 217 void	timer485Cntl(void)
 581                     ; 218 {
 582                     	switch	.text
 583  012b               _timer485Cntl:
 587                     ; 240 }
 590  012b 81            	ret
 593                     	switch	.data
 594  0011               ___timer100ms:
 595  0011 00            	dc.b	0
 596  0012               ___timer1s:
 597  0012 00            	dc.b	0
 598  0013               ___timer1min:
 599  0013 00            	dc.b	0
 600  0014               ___timer1h:
 601  0014 00            	dc.b	0
 602  0015               ___timeri:
 603  0015 00            	dc.b	0
 604  0016               ___timeri2:
 605  0016 00            	dc.b	0
 651                     ; 249 uint8_t	timerCalc(void)
 651                     ; 250 {
 652                     	switch	.text
 653  012c               _timerCalc:
 655  012c 89            	pushw	x
 656       00000002      OFST:	set	2
 659                     ; 252 	uint8_t	r = 0;
 661  012d 0f02          	clr	(OFST+0,sp)
 662                     ; 254 	uint8_t	i = _t20ms/5;
 664  012f c6000e        	ld	a,__t20ms
 665  0132 5f            	clrw	x
 666  0133 97            	ld	xl,a
 667  0134 a605          	ld	a,#5
 668  0136 62            	div	x,a
 669  0137 9f            	ld	a,xl
 670  0138 6b01          	ld	(OFST-1,sp),a
 671                     ; 256 	if( __timeri2 != _t2msCount )
 673  013a c60016        	ld	a,___timeri2
 674  013d c10010        	cp	a,__t2msCount
 675  0140 2707          	jreq	L702
 676                     ; 259 		__timeri2 = _t2msCount;
 678  0142 5500100016    	mov	___timeri2,__t2msCount
 679                     ; 260 		timer485Cntl();
 681  0147 ade2          	call	_timer485Cntl
 683  0149               L702:
 684                     ; 262 	if( __timeri != i )
 686  0149 c60015        	ld	a,___timeri
 687  014c 1101          	cp	a,(OFST-1,sp)
 688  014e 2751          	jreq	L112
 689                     ; 264 		__timeri = i;
 691  0150 7b01          	ld	a,(OFST-1,sp)
 692  0152 c70015        	ld	___timeri,a
 693                     ; 265 		__timer100ms++;
 695  0155 725c0011      	inc	___timer100ms
 696                     ; 266 		if( __timer100ms != 10 )
 698  0159 c60011        	ld	a,___timer100ms
 699  015c a10a          	cp	a,#10
 700  015e 2704          	jreq	L312
 701                     ; 267 			return r;
 703  0160 7b02          	ld	a,(OFST+0,sp)
 705  0162 2011          	jra	L62
 706  0164               L312:
 707                     ; 269 		__timer100ms = 0;
 709  0164 725f0011      	clr	___timer100ms
 710                     ; 270 		__timer1s++;
 712  0168 725c0012      	inc	___timer1s
 713                     ; 271 		if( __timer1s != 60 )
 715  016c c60012        	ld	a,___timer1s
 716  016f a13c          	cp	a,#60
 717  0171 2704          	jreq	L512
 718                     ; 272 			return r;
 720  0173 7b02          	ld	a,(OFST+0,sp)
 722  0175               L62:
 724  0175 85            	popw	x
 725  0176 81            	ret
 726  0177               L512:
 727                     ; 274 		__timer1s = 0;
 729  0177 725f0012      	clr	___timer1s
 730                     ; 275 		__timer1min++;
 732  017b 725c0013      	inc	___timer1min
 733                     ; 276 		r = 1;
 735  017f a601          	ld	a,#1
 736  0181 6b02          	ld	(OFST+0,sp),a
 737                     ; 277 		if( __timer1min != 60 )
 739  0183 c60013        	ld	a,___timer1min
 740  0186 a13c          	cp	a,#60
 741  0188 2704          	jreq	L712
 742                     ; 278 			return r;
 744  018a a601          	ld	a,#1
 746  018c 20e7          	jra	L62
 747  018e               L712:
 748                     ; 280 		__timer1min = 0;
 750  018e 725f0013      	clr	___timer1min
 751                     ; 281 		__timer1h++;
 753  0192 725c0014      	inc	___timer1h
 754                     ; 282 		if( __timer1h == 24 )
 756  0196 c60014        	ld	a,___timer1h
 757  0199 a118          	cp	a,#24
 758  019b 2604          	jrne	L112
 759                     ; 283 			__timer1h = 0;
 761  019d 725f0014      	clr	___timer1h
 762  01a1               L112:
 763                     ; 285 	return r;
 765  01a1 7b02          	ld	a,(OFST+0,sp)
 767  01a3 20d0          	jra	L62
 795                     ; 295 void	systemTimer(void)
 795                     ; 296 {
 796                     	switch	.text
 797  01a5               _systemTimer:
 801                     ; 310 	CLK_PeripheralClockConfig(CLK_Peripheral_TIM4, ENABLE);
 803  01a5 ae0201        	ldw	x,#513
 804  01a8 cd0000        	call	_CLK_PeripheralClockConfig
 806                     ; 311 	TIM4_TimeBaseInit(TIM4_Prescaler_32, TIMER_PERIOD);
 808  01ab ae0518        	ldw	x,#1304
 809  01ae cd0000        	call	_TIM4_TimeBaseInit
 811                     ; 312 	TIM4_ClearFlag(TIM4_FLAG_Update);
 813  01b1 a601          	ld	a,#1
 814  01b3 cd0000        	call	_TIM4_ClearFlag
 816                     ; 313 	TIM4_ITConfig(TIM4_IT_Update, ENABLE);
 818  01b6 ae0101        	ldw	x,#257
 819  01b9 cd0000        	call	_TIM4_ITConfig
 821                     ; 314 	TIM4_Cmd(ENABLE);
 823  01bc a601          	ld	a,#1
 824  01be cd0000        	call	_TIM4_Cmd
 826                     ; 350 }
 829  01c1 81            	ret
 861                     ; 352 void	timer2Cntl(uint8_t mode)
 861                     ; 353 {
 862                     	switch	.text
 863  01c2               _timer2Cntl:
 867                     ; 357 	return;
 870  01c2 81            	ret
1121                     	xdef	___timeri2
1122                     	xdef	___timeri
1123                     	xdef	_timer485Cntl
1124                     	xdef	__t2msCount
1125                     	xdef	__mtCount
1126                     	xdef	__rcCb
1127                     	xdef	__swuartCb
1128                     	xdef	__sw_sending
1129                     	xdef	__sw_bit
1130                     	switch	.bss
1131  0000               __sw_data:
1132  0000 00            	ds.b	1
1133                     	xdef	__sw_data
1134                     	xdef	__swuart_tx_tail
1135                     	xdef	__swuart_tx_head
1136  0001               _swTxBuffer:
1137  0001 000000000000  	ds.b	64
1138                     	xdef	_swTxBuffer
1139                     	xdef	__io_rc_prev
1140                     	xdef	____k2
1141                     	xdef	____k
1142                     	xdef	_lcd_pwmIndex
1143                     	xdef	_lcd_pwmCount
1144                     	xdef	_swuart_Write
1145                     	xdef	_timerCalc
1146                     	xdef	_timer2CiCb
1147                     	xdef	_timer4_UpdateCb
1148                     	xdef	_systemTimer
1149                     	xdef	___timer1h
1150                     	xdef	___timer1min
1151                     	xdef	___timer1s
1152                     	xdef	___timer100ms
1153                     	xdef	__t20ms
1154                     	xdef	_timer50usCount
1155                     	xdef	_timer100usCount
1156  0041               __io_buf:
1157  0041 000000000000  	ds.b	90
1158                     	xdef	__io_buf
1159                     	xdef	__io_tail
1160                     	xdef	__io_head
1161                     	xref	_iouart_Write
1162                     	xdef	_timer2Cntl
1163                     	xref	_indiIOUartIdle
1164                     	xdef	___iouart_Ready
1165                     	xref	_indiIOUartSendWait
1166                     	xdef	_timer2_UpdateCb
1167                     	xref	_TIM4_ClearFlag
1168                     	xref	_TIM4_ITConfig
1169                     	xref	_TIM4_Cmd
1170                     	xref	_TIM4_TimeBaseInit
1171                     	xref	_GPIO_ReadInputData
1172                     	xref	_CLK_PeripheralClockConfig
1173                     	xref.b	c_x
1193                     	xref	c_smodx
1194                     	end
